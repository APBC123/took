// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"took/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowListReq    = user.FollowListReq
	FollowListResp   = user.FollowListResp
	FollowReq        = user.FollowReq
	FollowResp       = user.FollowResp
	FollowerListReq  = user.FollowerListReq
	FollowerListResp = user.FollowerListResp
	FriendListReq    = user.FriendListReq
	FriendListResp   = user.FriendListResp
	FriendUser       = user.FriendUser
	LoginReq         = user.LoginReq
	LoginResp        = user.LoginResp
	RegisterReq      = user.RegisterReq
	RegisterResp     = user.RegisterResp
	User             = user.User
	UserInfoReq      = user.UserInfoReq
	UserInfoResp     = user.UserInfoResp

	UserService interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
		GetFollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error)
		GetFollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error)
		GetFriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUserService) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Follow(ctx, in, opts...)
}

func (m *defaultUserService) GetFollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetFollowList(ctx, in, opts...)
}

func (m *defaultUserService) GetFollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultUserService) GetFriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}
