// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chatservice

import (
	"context"

	"took/chat/rpc/types/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatMessageRequest      = chat.ChatMessageRequest
	ChatMessageResponse     = chat.ChatMessageResponse
	Message                 = chat.Message
	SendChatMessageRequest  = chat.SendChatMessageRequest
	SendChatMessageResponse = chat.SendChatMessageResponse

	ChatService interface {
		GetChatMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error)
		SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error)
	}

	defaultChatService struct {
		cli zrpc.Client
	}
)

func NewChatService(cli zrpc.Client) ChatService {
	return &defaultChatService{
		cli: cli,
	}
}

func (m *defaultChatService) GetChatMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.GetChatMessage(ctx, in, opts...)
}

func (m *defaultChatService) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.SendChatMessage(ctx, in, opts...)
}
